#!/usr/bin/perl -w

use strict;
use warnings;
use 5.006;
use Time::HiRes qw( gettimeofday tv_interval );

# Make sure we have the proper dependencies installed
my @deps = qw(
  Net::SAPO::Broker
  Getopt::Long
);

foreach my $module (@deps) {
	eval "require $module; import $module ();";
	if ($@) {
	  my $mesg = <<"    OOPS";
	    ERROR: You seem to be missing the '$module' module.
	    
	    Unfortunately I require that module to do my job. Use:

	      cpan $module
	      
	    to install it.
    OOPS
    _write_err_mesg($mesg);
    exit(1);
	}
}

# Parse command line

my ($subscribe, $publish, $quiet, $host, $help);
$subscribe = 1;
my $ok = GetOptions(
  "subscribe" => \$subscribe,
  "publish"   => \$publish,
  "host=s"    => \$host,
  "quiet"     => \$quiet,
  "help"      => \$help,
);

usage() unless $ok;
usage() if $help;
usage("Only one off 'subscribe' or 'publish' can be used")
  if $subscribe && $publish;
usage("Need set of topics to publish/subscribe to") unless @ARGV;

# Start a SAPO Broker connection
my $sb = Net::SAPO::Broker->new({
  host => $host,
  
  on_state_connecting => sub {
    my ($sb) = @_;
    my $agent = $sb->host;
    diag("## Connecting to agent at '$agent'");
  },
  on_connected => sub {
    diag("## Connected!");
  },
  on_eof => sub {
    diag("## Lost connection to agent");
  },
  on_state_disconnecting => sub {
    diag("## Disconnecting");
  },
  on_reconnect => sub {
    diag("## Reconnecting");
  },
  on_read_error => sub {
    my (undef, $e) = @_;
    diag("## Read error: $e");
  },
  on_write_error => sub {
    my (undef, $e) = @_;
    diag("## Write error: $e");
  },
});

# Run the proper role
if ($subscribe) {
  subscriber($sb, @ARGV);
}
else {
  publisher($sb, @ARGV);
}


### Roles

sub subscriber {
  my $sb = shift;
  
  foreach my $topic (@_) {
    $sb->subscribe({
      topic      => $topic,
      on_success => sub {
        diag("%% Subscribed topic '$topic'.");
      },
      on_error => sub {
        diag("ERROR subscribing to topic '$topic':");
        foreach my $e (@_) {
          next if ref($e);
          diag("    $e");
        }
      },
      on_message => sub {
        my (undef, $payload, $topic) = @_;
        my ($now, $count, $rate, $delta) = _calc_rate($topic);

        my $rt = sprintf('%0.3f mesg/sec (%d messages)', $rate, $count);
        my $ts = localtime($now->[0]);
        substr($ts, -5, 0, '.'.substr($now->[1], 0, 4));
        $ts .= sprintf(' (%0.3f elapsed since last message)', $delta) if $delta;

        print <<"        REPORT";
**** Got message on topic '$topic':
**** at $ts
**** rate for topic is $rt

--- START ---
$payload
---- END ---

        REPORT
      }
    })
  }
  
  # Temp hack, deliver_messages() should wait forever
  while (1) { $sb->deliver_messages(5) };
}

sub publisher {}


### Diagnostics

sub diag {
  print @_,"\n" unless $quiet;
}


### Rate calculations

our %topic_rate;

sub _calc_rate {
  my ($topic) = @_;
  my $now = [gettimeofday()];
  my ($delta, $rate, $count);
  
  my $stats = $topic_rate{$topic};
  
  if ($stats) {
    $count      = ++$stats->[1];
    $delta      = tv_interval($stats->[2], $now);
    $stats->[2] = $now;
    
    my $since_start = tv_interval($stats->[0], $now);
    $rate = $count / ($since_start||1);
  }
  else {
    $topic_rate{$topic} = [$now, 1, $now];
    $delta = 0;
    $rate  = 0;
    $count = 1
  }

  return ($now, $count, $rate, $delta);  
}


### Usage

sub usage {
  my ($mesg) = @_;
  
  print STDERR "ERROR: $mesg\n" if $mesg;
  _write_err_mesg(<<"  USAGE");
    Usage: sapo-broker-client --subcribe | --publish topic [topic...]
    
      --subscribe   prints new messages from any of the topics
      --publish     sends each non-empty lines from stdin to all the topics
  USAGE
  exit(1);
}

sub _write_err_mesg {
  my ($mesg) = @_;
  
  my ($prefix) = $mesg =~ /^(\s+)/;
  $mesg =~ s/^$prefix//gsm;
  print STDERR "\n",$mesg,"\n";
}